{
    "drivers": {
        "JAVA": "import java.util.*;\nimport java.time.*;\nimport java.math.*;\nimport java.io.*;\n\n{{solution}}\n        \n        public class Driver{\n            private static final Scanner scanner = new Scanner(System.in);\n            \n            public static void main(String[] args) {\n                for(int i = 0; i < {{testsCount}}; i++) {\n                    {{paramsInputSection}}\n                    {{returnType}} result = new Solution().{{methodName}}({{paramsList}});\n                    \n                    printResult(result);\n                }\n                scanner.close();\n            }\n    public static void printResult(Object obj) {\n        if (obj == null) {\n            System.out.println(\"null\");\n        } else if (obj.getClass().isArray()) {\n            if (obj instanceof int[]) {\n                System.out.println(Arrays.toString((int[]) obj));\n            } else if (obj instanceof short[]) {\n                System.out.println(Arrays.toString((short[]) obj));\n            } else if (obj instanceof long[]) {\n                System.out.println(Arrays.toString((long[]) obj));\n            } else if (obj instanceof double[]) {\n                System.out.println(Arrays.toString((double[]) obj));\n            } else if (obj instanceof float[]) {\n                System.out.println(Arrays.toString((float[]) obj));\n            } else if (obj instanceof boolean[]) {\n                System.out.println(Arrays.toString((boolean[]) obj));\n            } else if (obj instanceof char[]) {\n                System.out.println(Arrays.toString((char[]) obj));\n            } else {\n                System.out.println(Arrays.toString((Object[]) obj));\n            }\n        } else {\n            System.out.println(obj.toString());\n        }\n    }\n\n\n    {{readMethods}}\n}",
        "PYTHON": "import time\nimport psutil\nfrom typing import List\n\n{{solution}}\n\n{{readMethods}}\n\nif __name__ == '__main__':\n    for i in range({{testsCount}}):\n{{paramsInputSection}}\n        s = Solution()\n        ret = Solution.{{methodName}}(s, {{paramsList}})\n        print(ret)"
    },
    "typeLanguageMapping": {
        "INTEGER": {
            "readMethod": "READ_INTEGER",
            "typeConfig": {
                "JAVA": {
                    "read": "private static int READ_INTEGER() {\n  int input = scanner.nextInt();\n  scanner.nextLine();\n  return input;\n}",
                    "typeName": "int"
                },
                "PYTHON": {
                    "read": "def READ_INTEGER():\n    return int(input())",
                    "typeName": "int"
                }
            }
        },
        "STRING": {
            "readMethod": "READ_STRING",
            "typeConfig": {
                "JAVA": {
                    "read": "private static String READ_STRING() {\n  String input = scanner.nextLine();\n  input = input.replace(\" \", \"\");\n  return input;\n}",
                    "typeName": "String"
                },
                "PYTHON": {
                    "read": "def READ_STRING():\n    return input().replace(' ', '')",
                    "typeName": "str"
                }
            }
        }
    }
}